/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Cooldown model module.
 * @module model/Cooldown
 * @version 2.0.0
 */
class Cooldown {
    /**
     * Constructs a new <code>Cooldown</code>.
     * A cooldown is a period of time in which a ship cannot perform certain actions.
     * @alias module:model/Cooldown
     * @param shipSymbol {String} The symbol of the ship that is on cooldown
     * @param totalSeconds {Number} The total duration of the cooldown in seconds
     * @param remainingSeconds {Number} The remaining duration of the cooldown in seconds
     * @param expiration {Date} The date and time when the cooldown expires in ISO 8601 format
     */
    constructor(shipSymbol, totalSeconds, remainingSeconds, expiration) { 
        
        Cooldown.initialize(this, shipSymbol, totalSeconds, remainingSeconds, expiration);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, shipSymbol, totalSeconds, remainingSeconds, expiration) { 
        obj['shipSymbol'] = shipSymbol;
        obj['totalSeconds'] = totalSeconds;
        obj['remainingSeconds'] = remainingSeconds;
        obj['expiration'] = expiration;
    }

    /**
     * Constructs a <code>Cooldown</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Cooldown} obj Optional instance to populate.
     * @return {module:model/Cooldown} The populated <code>Cooldown</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Cooldown();

            if (data.hasOwnProperty('shipSymbol')) {
                obj['shipSymbol'] = ApiClient.convertToType(data['shipSymbol'], 'String');
            }
            if (data.hasOwnProperty('totalSeconds')) {
                obj['totalSeconds'] = ApiClient.convertToType(data['totalSeconds'], 'Number');
            }
            if (data.hasOwnProperty('remainingSeconds')) {
                obj['remainingSeconds'] = ApiClient.convertToType(data['remainingSeconds'], 'Number');
            }
            if (data.hasOwnProperty('expiration')) {
                obj['expiration'] = ApiClient.convertToType(data['expiration'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Cooldown</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Cooldown</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Cooldown.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['shipSymbol'] && !(typeof data['shipSymbol'] === 'string' || data['shipSymbol'] instanceof String)) {
            throw new Error("Expected the field `shipSymbol` to be a primitive type in the JSON string but got " + data['shipSymbol']);
        }

        return true;
    }


}

Cooldown.RequiredProperties = ["shipSymbol", "totalSeconds", "remainingSeconds", "expiration"];

/**
 * The symbol of the ship that is on cooldown
 * @member {String} shipSymbol
 */
Cooldown.prototype['shipSymbol'] = undefined;

/**
 * The total duration of the cooldown in seconds
 * @member {Number} totalSeconds
 */
Cooldown.prototype['totalSeconds'] = undefined;

/**
 * The remaining duration of the cooldown in seconds
 * @member {Number} remainingSeconds
 */
Cooldown.prototype['remainingSeconds'] = undefined;

/**
 * The date and time when the cooldown expires in ISO 8601 format
 * @member {Date} expiration
 */
Cooldown.prototype['expiration'] = undefined;






export default Cooldown;

